#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#

#kernel.domainname = example.com

# Uncomment the following to stop low-level messages on console
#kernel.printk = 3 4 1 3

###################################################################
# Functions previously found in netbase
#

# Uncomment the next two lines to enable Spoof protection (reverse-path filter)
# Turn on Source Address Verification in all interfaces to
# prevent some spoofing attacks
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.all.rp_filter=1

# Uncomment the next line to enable TCP/IP SYN cookies
# See http://lwn.net/Articles/277146/
# Note: This may impact IPv6 TCP sessions too
net.ipv4.tcp_syncookies=1

# Uncomment the next line to enable packet forwarding for IPv4
#net.ipv4.ip_forward=1

# Uncomment the next line to enable packet forwarding for IPv6
#  Enabling this option disables Stateless Address Autoconfiguration
#  based on Router Advertisements for this host
#net.ipv6.conf.all.forwarding=1


###################################################################
# Additional settings - these settings can improve the network
# security of the host and prevent against some network attacks
# including spoofing attacks and man in the middle attacks through
# redirection. Some network environments, however, require that these
# settings are disabled so review and enable them as needed.
#
# Do not accept ICMP redirects (prevent MITM attacks)
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
# _or_
# Accept ICMP redirects only for gateways listed in our default
# gateway list (enabled by default)
# net.ipv4.conf.all.secure_redirects = 1
#
# Do not send ICMP redirects (we are not a router)
net.ipv4.conf.all.send_redirects = 0
#
# Log Martian Packets
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
#
net.ipv4.conf.default.accept_source_route=0

###################################################################
# Magic system request Key
# 0=disable, 1=enable all, >1 bitmask of sysrq functions
# See https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
# for what other values do
#kernel.sysrq=438
kernel.sysrq=0

###################################################################
# Additional settings from lynis

# Any process which has changed privilege levels or is execute only
# will not be dumped.
fs.suid_dumpable = 0

# By setting core_uses_pid to 1, the coredump filename becomes
# core.PID. If core_pattern does not include “%p” (by default it
# doesn't) and core_uses_pid is set, then .PID will be appended to
# the filename.
kernel.core_uses_pid = 1

# This setting will attempt to prevent any possible kernel leaks
# such as dmesg or /proc/kallsyms. These pointers can be very useful
# for a kernel exploit. The =2 will print all kernel pointers
# regardless of privileges (such as root) as 0s and =1 one will just
# print it that way for the user.
kernel.kptr_restrict=2

# This will prevent users from accessing the kernel logs which can be
# useful to gain information such as kernel pointers.
kernel.dmesg_restrict=1

#dev.tty.ldisc_autoload=0

# This will avoid unintentional writes to an attacker-controlled FIFO,
# where a program may have expected to create a regular file.
fs.protected_fifos=2

# This protection is similar to protected_fifos, but it avoids writing
# to an attacker-controlled regular file, where the program may have
# expected to create one.
fs.protected_regular=2

# This will make sure hardlinks cannot be created by users if they don't
# already own the source file, or do not have read/write access to it.
fs.protected_hardlinks=1

# Symlinks will now only be permitted to be followed only when outside a
# sticky world-writable directory, when the uid of the symlink and
# follower match, or when the directory owner matches the symlink’s owner.
fs.protected_symlinks=1

# This makes it so only root can access perf events
kernel.perf_event_paranoid=3

# This will disable all unprivileged calls to bpf().
kernel.unprivileged_bpf_disabled=1

# This will disable kexec which can be used to replace the current
# running kernel.
kernel.kexec_load_disabled=1


